// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: orders.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  start_date, end_date,batch_id,bundle_id,nrc
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, start_date, end_date, batch_id, bundle_id, nrc
`

type CreateOrderParams struct {
	StartDate time.Time       `json:"start_date"`
	EndDate   time.Time       `json:"end_date"`
	BatchID   int64           `json:"batch_id"`
	BundleID  int64           `json:"bundle_id"`
	Nrc       sql.NullFloat64 `json:"nrc"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.StartDate,
		arg.EndDate,
		arg.BatchID,
		arg.BundleID,
		arg.Nrc,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.StartDate,
		&i.EndDate,
		&i.BatchID,
		&i.BundleID,
		&i.Nrc,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, start_date, end_date, batch_id, bundle_id, nrc FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrderByID(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.StartDate,
		&i.EndDate,
		&i.BatchID,
		&i.BundleID,
		&i.Nrc,
	)
	return i, err
}

const listOrdersByBatchID = `-- name: ListOrdersByBatchID :many
SELECT id, start_date, end_date, batch_id, bundle_id, nrc FROM orders
WHERE batch_id = $1
ORDER BY batch_id
`

func (q *Queries) ListOrdersByBatchID(ctx context.Context, batchID int64) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrdersByBatchID, batchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.StartDate,
			&i.EndDate,
			&i.BatchID,
			&i.BundleID,
			&i.Nrc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrdersByBundleID = `-- name: ListOrdersByBundleID :many
SELECT id, start_date, end_date, batch_id, bundle_id, nrc FROM orders
WHERE bundle_id = $1
ORDER BY bundle_id
`

func (q *Queries) ListOrdersByBundleID(ctx context.Context, bundleID int64) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrdersByBundleID, bundleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.StartDate,
			&i.EndDate,
			&i.BatchID,
			&i.BundleID,
			&i.Nrc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrders = `-- name: UpdateOrders :one
UPDATE orders
SET
  nrc = COALESCE($4, nrc),
  bundle_id = $2,
  start_date = COALESCE($5, start_date),
  end_date = $3
WHERE id = $1
RETURNING id, start_date, end_date, batch_id, bundle_id, nrc
`

type UpdateOrdersParams struct {
	ID        int64           `json:"id"`
	BundleID  int64           `json:"bundle_id"`
	EndDate   time.Time       `json:"end_date"`
	Nrc       sql.NullFloat64 `json:"nrc"`
	StartDate sql.NullTime    `json:"start_date"`
}

func (q *Queries) UpdateOrders(ctx context.Context, arg UpdateOrdersParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrders,
		arg.ID,
		arg.BundleID,
		arg.EndDate,
		arg.Nrc,
		arg.StartDate,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.StartDate,
		&i.EndDate,
		&i.BatchID,
		&i.BundleID,
		&i.Nrc,
	)
	return i, err
}
