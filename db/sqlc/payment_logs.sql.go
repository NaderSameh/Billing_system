// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: payment_logs.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payment_logs (
  payment, due_date, order_id, confirmed
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, payment, due_date, confirmation_date, order_id, confirmed
`

type CreatePaymentParams struct {
	Payment   float64   `json:"payment"`
	DueDate   time.Time `json:"due_date"`
	OrderID   int64     `json:"order_id"`
	Confirmed bool      `json:"confirmed"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (PaymentLog, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.Payment,
		arg.DueDate,
		arg.OrderID,
		arg.Confirmed,
	)
	var i PaymentLog
	err := row.Scan(
		&i.ID,
		&i.Payment,
		&i.DueDate,
		&i.ConfirmationDate,
		&i.OrderID,
		&i.Confirmed,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM payment_logs
WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePayment, id)
	return err
}

const getPaymentForUpdate = `-- name: GetPaymentForUpdate :one
SELECT id, payment, due_date, confirmation_date, order_id, confirmed FROM payment_logs
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetPaymentForUpdate(ctx context.Context, id int64) (PaymentLog, error) {
	row := q.db.QueryRowContext(ctx, getPaymentForUpdate, id)
	var i PaymentLog
	err := row.Scan(
		&i.ID,
		&i.Payment,
		&i.DueDate,
		&i.ConfirmationDate,
		&i.OrderID,
		&i.Confirmed,
	)
	return i, err
}

const listPaymentByConfirmation = `-- name: ListPaymentByConfirmation :many
SELECT id, payment, due_date, confirmation_date, order_id, confirmed FROM payment_logs
WHERE confirmed = $1
ORDER BY id
`

func (q *Queries) ListPaymentByConfirmation(ctx context.Context, confirmed bool) ([]PaymentLog, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentByConfirmation, confirmed)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaymentLog{}
	for rows.Next() {
		var i PaymentLog
		if err := rows.Scan(
			&i.ID,
			&i.Payment,
			&i.DueDate,
			&i.ConfirmationDate,
			&i.OrderID,
			&i.Confirmed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePayment = `-- name: UpdatePayment :one
UPDATE payment_logs
SET due_date = $2,
confirmation_date = $3,
order_id = $4,
confirmed = $5
WHERE id = $1
RETURNING id, payment, due_date, confirmation_date, order_id, confirmed
`

type UpdatePaymentParams struct {
	ID               int64        `json:"id"`
	DueDate          time.Time    `json:"due_date"`
	ConfirmationDate sql.NullTime `json:"confirmation_date"`
	OrderID          int64        `json:"order_id"`
	Confirmed        bool         `json:"confirmed"`
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (PaymentLog, error) {
	row := q.db.QueryRowContext(ctx, updatePayment,
		arg.ID,
		arg.DueDate,
		arg.ConfirmationDate,
		arg.OrderID,
		arg.Confirmed,
	)
	var i PaymentLog
	err := row.Scan(
		&i.ID,
		&i.Payment,
		&i.DueDate,
		&i.ConfirmationDate,
		&i.OrderID,
		&i.Confirmed,
	)
	return i, err
}
