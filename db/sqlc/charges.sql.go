// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: charges.sql

package db

import (
	"context"
)

const createCharges = `-- name: CreateCharges :one
INSERT INTO charges (
  paid, due, customer_id
) VALUES (
  $1, $2, $3
)
RETURNING id, paid, due, customer_id
`

type CreateChargesParams struct {
	Paid       float64 `json:"paid"`
	Due        float64 `json:"due"`
	CustomerID int64   `json:"customer_id"`
}

func (q *Queries) CreateCharges(ctx context.Context, arg CreateChargesParams) (Charge, error) {
	row := q.db.QueryRowContext(ctx, createCharges, arg.Paid, arg.Due, arg.CustomerID)
	var i Charge
	err := row.Scan(
		&i.ID,
		&i.Paid,
		&i.Due,
		&i.CustomerID,
	)
	return i, err
}

const deleteCharges = `-- name: DeleteCharges :exec
DELETE FROM charges
WHERE customer_id = $1
`

func (q *Queries) DeleteCharges(ctx context.Context, customerID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCharges, customerID)
	return err
}

const updateCharges = `-- name: UpdateCharges :one
UPDATE charges
SET paid = $2,
due = $3
WHERE customer_id = $1
RETURNING id, paid, due, customer_id
`

type UpdateChargesParams struct {
	CustomerID int64   `json:"customer_id"`
	Paid       float64 `json:"paid"`
	Due        float64 `json:"due"`
}

func (q *Queries) UpdateCharges(ctx context.Context, arg UpdateChargesParams) (Charge, error) {
	row := q.db.QueryRowContext(ctx, updateCharges, arg.CustomerID, arg.Paid, arg.Due)
	var i Charge
	err := row.Scan(
		&i.ID,
		&i.Paid,
		&i.Due,
		&i.CustomerID,
	)
	return i, err
}
