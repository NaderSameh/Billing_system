// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: batches.sql

package db

import (
	"context"
	"database/sql"
)

const createBatch = `-- name: CreateBatch :one
INSERT INTO batches (
  name, activation_status, customer_id, 
  no_of_devices, delivery_date, warranty_end
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, activation_status, customer_id, no_of_devices, delivery_date, warranty_end
`

type CreateBatchParams struct {
	Name             string       `json:"name"`
	ActivationStatus string       `json:"activation_status"`
	CustomerID       int64        `json:"customer_id"`
	NoOfDevices      int32        `json:"no_of_devices"`
	DeliveryDate     sql.NullTime `json:"delivery_date"`
	WarrantyEnd      sql.NullTime `json:"warranty_end"`
}

func (q *Queries) CreateBatch(ctx context.Context, arg CreateBatchParams) (Batch, error) {
	row := q.db.QueryRowContext(ctx, createBatch,
		arg.Name,
		arg.ActivationStatus,
		arg.CustomerID,
		arg.NoOfDevices,
		arg.DeliveryDate,
		arg.WarrantyEnd,
	)
	var i Batch
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ActivationStatus,
		&i.CustomerID,
		&i.NoOfDevices,
		&i.DeliveryDate,
		&i.WarrantyEnd,
	)
	return i, err
}

const deleteBatch = `-- name: DeleteBatch :exec
DELETE FROM batches
WHERE id = $1
`

func (q *Queries) DeleteBatch(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBatch, id)
	return err
}

const getBatchByName = `-- name: GetBatchByName :one
SELECT id, name, activation_status, customer_id, no_of_devices, delivery_date, warranty_end FROM batches
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetBatchByName(ctx context.Context, name string) (Batch, error) {
	row := q.db.QueryRowContext(ctx, getBatchByName, name)
	var i Batch
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ActivationStatus,
		&i.CustomerID,
		&i.NoOfDevices,
		&i.DeliveryDate,
		&i.WarrantyEnd,
	)
	return i, err
}

const getBatchForUpdate = `-- name: GetBatchForUpdate :one
SELECT id, name, activation_status, customer_id, no_of_devices, delivery_date, warranty_end FROM batches
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetBatchForUpdate(ctx context.Context, id int64) (Batch, error) {
	row := q.db.QueryRowContext(ctx, getBatchForUpdate, id)
	var i Batch
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ActivationStatus,
		&i.CustomerID,
		&i.NoOfDevices,
		&i.DeliveryDate,
		&i.WarrantyEnd,
	)
	return i, err
}

const listAllBatches = `-- name: ListAllBatches :many
SELECT id, name, activation_status, customer_id, no_of_devices, delivery_date, warranty_end FROM batches
WHERE (name = $3 OR $3 IS NULL)
AND (customer_id = $4 OR $4 IS NULL)
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAllBatchesParams struct {
	Limit      int32          `json:"limit"`
	Offset     int32          `json:"offset"`
	Name       sql.NullString `json:"name"`
	CustomerID sql.NullInt64  `json:"customer_id"`
}

func (q *Queries) ListAllBatches(ctx context.Context, arg ListAllBatchesParams) ([]Batch, error) {
	rows, err := q.db.QueryContext(ctx, listAllBatches,
		arg.Limit,
		arg.Offset,
		arg.Name,
		arg.CustomerID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Batch{}
	for rows.Next() {
		var i Batch
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ActivationStatus,
			&i.CustomerID,
			&i.NoOfDevices,
			&i.DeliveryDate,
			&i.WarrantyEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllBatchesCount = `-- name: ListAllBatchesCount :one
SELECT COUNT(*) FROM batches
WHERE (name = $1 OR $1 IS NULL)
AND (customer_id = $2 OR $2 IS NULL)
`

type ListAllBatchesCountParams struct {
	Name       sql.NullString `json:"name"`
	CustomerID sql.NullInt64  `json:"customer_id"`
}

func (q *Queries) ListAllBatchesCount(ctx context.Context, arg ListAllBatchesCountParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, listAllBatchesCount, arg.Name, arg.CustomerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateBatch = `-- name: UpdateBatch :one
UPDATE batches
SET
customer_id = $3,
activation_status = $4,
no_of_devices = $5,
delivery_date = $6,
warranty_end = $2
WHERE id = $1
RETURNING id, name, activation_status, customer_id, no_of_devices, delivery_date, warranty_end
`

type UpdateBatchParams struct {
	ID               int64        `json:"id"`
	WarrantyEnd      sql.NullTime `json:"warranty_end"`
	CustomerID       int64        `json:"customer_id"`
	ActivationStatus string       `json:"activation_status"`
	NoOfDevices      int32        `json:"no_of_devices"`
	DeliveryDate     sql.NullTime `json:"delivery_date"`
}

func (q *Queries) UpdateBatch(ctx context.Context, arg UpdateBatchParams) (Batch, error) {
	row := q.db.QueryRowContext(ctx, updateBatch,
		arg.ID,
		arg.WarrantyEnd,
		arg.CustomerID,
		arg.ActivationStatus,
		arg.NoOfDevices,
		arg.DeliveryDate,
	)
	var i Batch
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ActivationStatus,
		&i.CustomerID,
		&i.NoOfDevices,
		&i.DeliveryDate,
		&i.WarrantyEnd,
	)
	return i, err
}
