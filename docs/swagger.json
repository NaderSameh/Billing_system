{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Ticketing support microservice",
        "title": "Gin Swagger Example API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Cypodsolutions",
            "url": "http://www.cypod.com/",
            "email": "naders@cypodsolutions.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/batches": {
            "get": {
                "description": "List all batches with optional filter \"customer_name\", pagination params are required",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "batches"
                ],
                "summary": "List Batches",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter: customer name",
                        "name": "customer_name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page ID",
                        "name": "page_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page Size",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.listBatchesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "description": "Create a new Batch specifying its name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "batches"
                ],
                "summary": "Create new Batch",
                "parameters": [
                    {
                        "description": "Create Batch body",
                        "name": "arg",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createBatchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Batch"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/batches/{batch_id}": {
            "put": {
                "description": "Update Batch by a Batch ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "batches"
                ],
                "summary": "Update Batch",
                "parameters": [
                    {
                        "description": "Update Batch body",
                        "name": "arg",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.updateBatchRequestJSON"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "Batch ID for update",
                        "name": "batch_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Batch"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "description": "Delete batch by a batch ID",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "batches"
                ],
                "summary": "Delete Batch",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Batch ID",
                        "name": "batch_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "true"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/bundles": {
            "get": {
                "description": "Get bundles for a specific customer - get all system bundles if no customer specified",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bundles"
                ],
                "summary": "Get Bundles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Get bundle body",
                        "name": "customer_name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.ListBundlesWithCustomerRow"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "description": "Create a new Bundle specifying its name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bundles"
                ],
                "summary": "Create new Bundle",
                "parameters": [
                    {
                        "description": "Create bundle body",
                        "name": "arg",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createBundleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Bundle"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/bundles/assign": {
            "post": {
                "description": "Assign a bundle to a specific customer using bundle id and customer name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "bundles"
                ],
                "summary": "Assign bundle to customer",
                "parameters": [
                    {
                        "description": "Assign bundle body",
                        "name": "arg",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.assignBundleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/bundles/{bundle_id}": {
            "delete": {
                "description": "Delete  Bundle",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bundles"
                ],
                "summary": "Delete  Bundle",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bundle ID",
                        "name": "bundle_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "true"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/charges": {
            "get": {
                "description": "List all charges on a customer (optional filter), list all charges in the system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customer_charges"
                ],
                "summary": "List Charges",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter: customer name",
                        "name": "customer_name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.Customer"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "description": "Get all placed order with details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get all orders",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Order"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "description": "Update an order specifying its end date, bundle mrc, nrc flag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Update Order with actual params",
                "parameters": [
                    {
                        "description": "Create Order body",
                        "name": "arg",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.updateOrderRequestJSON"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "order ID for update",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "description": "Create a new order specifying its batch name, it will create with no NRC, default MRC for 1 year",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create new Order",
                "parameters": [
                    {
                        "description": "Create Order body",
                        "name": "arg",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/payments_logs": {
            "get": {
                "description": "List payments, filtering by confirmation \u0026 customer id are optional params, pagination params is required",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments logs"
                ],
                "summary": "List Payments",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page ID",
                        "name": "page_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page Size",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "customer_name",
                        "name": "customer_name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.PaymentLog"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/payments_logs/{log_id}": {
            "put": {
                "description": "Update Payment log's due date \u0026 confirmation using the payment log ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments logs"
                ],
                "summary": "Update Payment",
                "parameters": [
                    {
                        "description": "Update log body",
                        "name": "arg",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.updatePaymentLogRequestJSON"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "payment log ID for update",
                        "name": "log_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.PaymentLog"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "description": "Delete a payment log, removing its corresponding charges from the customer total charges",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "payments logs"
                ],
                "summary": "Delete Payment Log",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Log ID",
                        "name": "log_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "true"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        }
    },
    "definitions": {
        "api.assignBundleRequest": {
            "type": "object",
            "required": [
                "assigned_customers",
                "bundle_id"
            ],
            "properties": {
                "assigned_customers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "bundle_id": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "api.createBatchRequest": {
            "type": "object",
            "required": [
                "activation_status",
                "customer_name",
                "name",
                "no_of_devices"
            ],
            "properties": {
                "activation_status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive",
                        "suspended",
                        "canceled"
                    ]
                },
                "customer_name": {
                    "type": "string",
                    "minLength": 1
                },
                "delivery_date": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "minLength": 1
                },
                "no_of_devices": {
                    "type": "integer",
                    "minimum": 1
                },
                "warranty_end": {
                    "type": "string"
                }
            }
        },
        "api.createBundleRequest": {
            "type": "object",
            "required": [
                "description",
                "mrc"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "mrc": {
                    "type": "number",
                    "minimum": 1
                }
            }
        },
        "api.createOrderRequest": {
            "type": "object",
            "required": [
                "batch_name"
            ],
            "properties": {
                "batch_name": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "api.listBatchesResponse": {
            "type": "object",
            "properties": {
                "batches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.Batch"
                    }
                },
                "pages": {
                    "type": "integer"
                }
            }
        },
        "api.updateBatchRequestJSON": {
            "type": "object",
            "properties": {
                "activation_status": {
                    "type": "string"
                },
                "customer_name": {
                    "type": "string"
                },
                "delivery_date": {
                    "$ref": "#/definitions/sql.NullTime"
                },
                "no_of_devices": {
                    "type": "integer"
                },
                "warranty_end": {
                    "$ref": "#/definitions/sql.NullTime"
                }
            }
        },
        "api.updateOrderRequestJSON": {
            "type": "object",
            "required": [
                "bundle_id",
                "end_date"
            ],
            "properties": {
                "bundle_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "end_date": {
                    "type": "string"
                },
                "nrc": {
                    "$ref": "#/definitions/sql.NullFloat64"
                },
                "start_date": {
                    "$ref": "#/definitions/sql.NullTime"
                }
            }
        },
        "api.updatePaymentLogRequestJSON": {
            "type": "object",
            "required": [
                "confirmed"
            ],
            "properties": {
                "confirmed": {
                    "type": "boolean"
                },
                "due_date": {
                    "$ref": "#/definitions/sql.NullTime"
                }
            }
        },
        "db.Batch": {
            "type": "object",
            "properties": {
                "activation_status": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "integer"
                },
                "delivery_date": {
                    "$ref": "#/definitions/sql.NullTime"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "no_of_devices": {
                    "type": "integer"
                },
                "warranty_end": {
                    "$ref": "#/definitions/sql.NullTime"
                }
            }
        },
        "db.Bundle": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "mrc": {
                    "type": "number"
                }
            }
        },
        "db.Customer": {
            "type": "object",
            "properties": {
                "customer": {
                    "type": "string"
                },
                "due": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "paid": {
                    "type": "number"
                }
            }
        },
        "db.ListBundlesWithCustomerRow": {
            "type": "object",
            "properties": {
                "assigned_customers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "bundle_id": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "mrc": {
                    "type": "number"
                }
            }
        },
        "db.Order": {
            "type": "object",
            "properties": {
                "batch_id": {
                    "type": "integer"
                },
                "bundle_id": {
                    "type": "integer"
                },
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "nrc": {
                    "$ref": "#/definitions/sql.NullFloat64"
                },
                "start_date": {
                    "type": "string"
                }
            }
        },
        "db.PaymentLog": {
            "type": "object",
            "properties": {
                "confirmation_date": {
                    "$ref": "#/definitions/sql.NullTime"
                },
                "confirmed": {
                    "type": "boolean"
                },
                "customer_id": {
                    "type": "integer"
                },
                "due_date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "order_id": {
                    "type": "integer"
                },
                "payment": {
                    "type": "number"
                }
            }
        },
        "sql.NullFloat64": {
            "type": "object",
            "properties": {
                "float64": {
                    "type": "number"
                },
                "valid": {
                    "description": "Valid is true if Float64 is not NULL",
                    "type": "boolean"
                }
            }
        },
        "sql.NullTime": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        }
    }
}